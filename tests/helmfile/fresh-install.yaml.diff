Comparing release=valkey, chart=bitnami/valkey, namespace=dev
********************

	Release was not present in Helm.  Diff will show entire contents as new.

********************
dev, valkey, NetworkPolicy (networking.k8s.io) has been added:
- 
+ # Source: valkey/templates/networkpolicy.yaml
+ kind: NetworkPolicy
+ apiVersion: networking.k8s.io/v1
+ metadata:
+   name: valkey
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/part-of: valkey
+ spec:
+   podSelector:
+     matchLabels:
+       app.kubernetes.io/instance: valkey
+       app.kubernetes.io/name: valkey
+   policyTypes:
+     - Ingress
+     - Egress
+   egress:
+     - {}
+   ingress:
+     # Allow inbound connections
+     - ports:
+         - port: 6379
dev, valkey, Secret (v1) has been added:
+ # Source: valkey/templates/secret.yaml
+ apiVersion: v1
+ kind: Secret
+ metadata:
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/part-of: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+   name: valkey
+   namespace: dev
+ data:
+   valkey-password: '++++++++ # (10 bytes)'
+ type: Opaque

dev, valkey-configuration, ConfigMap (v1) has been added:
- 
+ # Source: valkey/templates/configmap.yaml
+ apiVersion: v1
+ kind: ConfigMap
+ metadata:
+   name: valkey-configuration
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/part-of: valkey
+ data:
+   valkey.conf: |-
+     # User-supplied common configuration:
+     # Enable AOF https://valkey.io/docs/topics/persistence.html
+     appendonly yes
+     # Disable RDB persistence, AOF persistence already enabled.
+     save ""
+     # End of common configuration
+   master.conf: |-
+     dir /data
+     # User-supplied master configuration:
+     rename-command FLUSHDB ""
+     rename-command FLUSHALL ""
+     # End of master configuration
+   replica.conf: |-
+     dir /data
+     # User-supplied replica configuration:
+     rename-command FLUSHDB ""
+     rename-command FLUSHALL ""
+     # End of replica configuration
dev, valkey-headless, Service (v1) has been added:
- 
+ # Source: valkey/templates/headless-svc.yaml
+ apiVersion: v1
+ kind: Service
+ metadata:
+   name: valkey-headless
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/part-of: valkey
+ spec:
+   type: ClusterIP
+   clusterIP: None
+   ports:
+     - name: tcp-redis
+       port:  6379
+       targetPort: redis
+   selector:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/name: valkey
dev, valkey-health, ConfigMap (v1) has been added:
+ # Source: valkey/templates/health-configmap.yaml
+ apiVersion: v1
+ kind: ConfigMap
+ metadata:
+   name: valkey-health
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+ data:
+   ping_readiness_local.sh: |-
+     #!/bin/bash
+ 
+     [[ -f $VALKEY_PASSWORD_FILE ]] && export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
+     [[ -n "$VALKEY_PASSWORD" ]] && export REDISCLI_AUTH="$VALKEY_PASSWORD"
+     response=$(
+       timeout -s 15 $1 \
+       valkey-cli \
+         -h localhost \
+         -p $VALKEY_PORT \
+         ping
+     )
+     if [ "$?" -eq "124" ]; then
+       echo "Timed out"
+       exit 1
+     fi
+     if [ "$response" != "PONG" ]; then
+       echo "$response"
+       exit 1
+     fi
+   ping_liveness_local.sh: |-
+     #!/bin/bash
+ 
+     [[ -f $VALKEY_PASSWORD_FILE ]] && export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
+     [[ -n "$VALKEY_PASSWORD" ]] && export REDISCLI_AUTH="$VALKEY_PASSWORD"
+     response=$(
+       timeout -s 15 $1 \
+       valkey-cli \
+         -h localhost \
+         -p $VALKEY_PORT \
+         ping
+     )
+     if [ "$?" -eq "124" ]; then
+       echo "Timed out"
+       exit 1
+     fi
+     responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
+     if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
+       echo "$response"
+       exit 1
+     fi
+   ping_readiness_master.sh: |-
+     #!/bin/bash
+ 
+     [[ -f $VALKEY_MASTER_PASSWORD_FILE ]] && export VALKEY_MASTER_PASSWORD="$(< "${VALKEY_MASTER_PASSWORD_FILE}")"
+     [[ -n "$VALKEY_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$VALKEY_MASTER_PASSWORD"
+     response=$(
+       timeout -s 15 $1 \
+       valkey-cli \
+         -h $VALKEY_MASTER_HOST \
+         -p $VALKEY_MASTER_PORT_NUMBER \
+         ping
+     )
+     if [ "$?" -eq "124" ]; then
+       echo "Timed out"
+       exit 1
+     fi
+     if [ "$response" != "PONG" ]; then
+       echo "$response"
+       exit 1
+     fi
+   ping_liveness_master.sh: |-
+     #!/bin/bash

+     [[ -f $VALKEY_MASTER_PASSWORD_FILE ]] && export VALKEY_MASTER_PASSWORD="$(< "${VALKEY_MASTER_PASSWORD_FILE}")"
+     [[ -n "$VALKEY_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$VALKEY_MASTER_PASSWORD"
+     response=$(
+       timeout -s 15 $1 \
+       valkey-cli \
+         -h $VALKEY_MASTER_HOST \
+         -p $VALKEY_MASTER_PORT_NUMBER \
+         ping
+     )
+     if [ "$?" -eq "124" ]; then
+       echo "Timed out"
+       exit 1
+     fi
+     responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
+     if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
+       echo "$response"
+       exit 1
+     fi
+   ping_readiness_local_and_master.sh: |-
+     script_dir="$(dirname "$0")"
+     exit_status=0
+     "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
+     "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
+     exit $exit_status
+   ping_liveness_local_and_master.sh: |-
+     script_dir="$(dirname "$0")"
+     exit_status=0
+     "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
+     "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
+     exit $exit_status
dev, valkey-master, Service (v1) has been added:
- 
+ # Source: valkey/templates/master/service.yaml
+ apiVersion: v1
+ kind: Service
+ metadata:
+   name: valkey-master
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/component: master
+     app.kubernetes.io/part-of: valkey
+ spec:
+   type: ClusterIP
+   internalTrafficPolicy: Cluster
+   sessionAffinity: None
+   ports:
+     - name: tcp-redis
+       port: 6379
+       targetPort: redis
+       nodePort: null
+   selector:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/component: master
dev, valkey-master, ServiceAccount (v1) has been added:
- 
+ # Source: valkey/templates/master/serviceaccount.yaml
+ apiVersion: v1
+ kind: ServiceAccount
+ automountServiceAccountToken: false
+ metadata:
+   name: valkey-master
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/part-of: valkey
dev, valkey-master, StatefulSet (apps) has been added:
- 
+ # Source: valkey/templates/master/application.yaml
+ apiVersion: apps/v1
+ kind: StatefulSet
+ metadata:
+   name: valkey-master
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/component: master
+     app.kubernetes.io/part-of: valkey
+ spec:
+   replicas: 1
+   selector:
+     matchLabels:
+       app.kubernetes.io/instance: valkey
+       app.kubernetes.io/name: valkey
+       app.kubernetes.io/component: master
+   serviceName: valkey-headless
+   updateStrategy:
+     type: RollingUpdate
+   template:
+     metadata:
+       labels:
+         app.kubernetes.io/instance: valkey
+         app.kubernetes.io/managed-by: Helm
+         app.kubernetes.io/name: valkey
+         app.kubernetes.io/version: 8.0.1
+         helm.sh/chart: valkey-1.0.2
+         app.kubernetes.io/component: master
+       annotations:
+         checksum/configmap: ce36bba0f0ecd2a1435db147939805e631a1479f690fbb9021e9a53fe7f2e0e4
+         checksum/health: e6094ccfe6ef68b9fe1224188ba4f7458e1dd911ec698b5e8cefedc6d07f502e
+         checksum/scripts: f67fdb8e9103ec01b5a72d9a27e1a9d34e6dd7966e13839535d6b4a477e2f532
+         checksum/secret: cbebcf17c7d2453f929d228b2318d4d740506b4eb39fe6d1a91127b98c88bb8d
+     spec:
+       
+       securityContext:
+         fsGroup: 1001
+         fsGroupChangePolicy: Always
+         supplementalGroups: []
+         sysctls: []
+       serviceAccountName: valkey-master
+       automountServiceAccountToken: false
+       affinity:
+         podAffinity:
+           
+         podAntiAffinity:
+           preferredDuringSchedulingIgnoredDuringExecution:
+             - podAffinityTerm:
+                 labelSelector:
+                   matchLabels:
+                     app.kubernetes.io/instance: valkey
+                     app.kubernetes.io/name: valkey
+                     app.kubernetes.io/component: master
+                 topologyKey: kubernetes.io/hostname
+               weight: 1
+         nodeAffinity:
+           
+       enableServiceLinks: true
+       terminationGracePeriodSeconds: 30
+       containers:
+         - name: valkey
+           image: docker.io/bitnami/valkey:8.0.1-debian-12-r0
+           imagePullPolicy: "IfNotPresent"
+           securityContext:
+             allowPrivilegeEscalation: false
+             capabilities:
+               drop:
+               - ALL
+             readOnlyRootFilesystem: true
+             runAsGroup: 1001
+             runAsNonRoot: true
+             runAsUser: 1001
+             seLinuxOptions: {}
+             seccompProfile:
+               type: RuntimeDefault
+           command:
+             - /bin/bash
+           args:
+             - -c
+             - /opt/bitnami/scripts/start-scripts/start-master.sh
+           env:
+             - name: BITNAMI_DEBUG
+               value: "false"
+             - name: VALKEY_REPLICATION_MODE
+               value: master
+             - name: ALLOW_EMPTY_PASSWORD
+               value: "no"
+             - name: VALKEY_PASSWORD
+               valueFrom:
+                 secretKeyRef:
+                   name: valkey
+                   key: valkey-password
+             - name: VALKEY_TLS_ENABLED
+               value: "no"
+             - name: VALKEY_PORT
+               value: "6379"
+           ports:
+             - name: redis
+               containerPort: 6379
+           livenessProbe:
+             initialDelaySeconds: 20
+             periodSeconds: 5
+             # One second longer than command timeout should prevent generation of zombie processes.
+             timeoutSeconds: 6
+             successThreshold: 1
+             failureThreshold: 5
+             exec:
+               command:
+                 - sh
+                 - -c
+                 - /health/ping_liveness_local.sh 5
+           readinessProbe:
+             initialDelaySeconds: 20
+             periodSeconds: 5
+             timeoutSeconds: 2
+             successThreshold: 1
+             failureThreshold: 5
+             exec:
+               command:
+                 - sh
+                 - -c
+                 - /health/ping_readiness_local.sh 1
+           resources:
+             limits:
+               cpu: 150m
+               ephemeral-storage: 2Gi
+               memory: 192Mi
+             requests:
+               cpu: 100m
+               ephemeral-storage: 50Mi
+               memory: 128Mi
+           volumeMounts:
+             - name: start-scripts
+               mountPath: /opt/bitnami/scripts/start-scripts
+             - name: health
+               mountPath: /health
+             - name: valkey-data
+               mountPath: /data
+             - name: config
+               mountPath: /opt/bitnami/valkey/mounted-etc
+             - name: empty-dir
+               mountPath: /opt/bitnami/valkey/etc/
+               subPath: app-conf-dir
+             - name: empty-dir
+               mountPath: /tmp
+               subPath: tmp-dir
+       volumes:
+         - name: start-scripts
+           configMap:
+             name: valkey-scripts
+             defaultMode: 0755
+         - name: health
+           configMap:
+             name: valkey-health
+             defaultMode: 0755
+         - name: config
+           configMap:
+             name: valkey-configuration
+         - name: empty-dir
+           emptyDir: {}
+   volumeClaimTemplates:
+     - apiVersion: v1
+       kind: PersistentVolumeClaim
+       metadata:
+         name: valkey-data
+         labels:
+           app.kubernetes.io/instance: valkey
+           app.kubernetes.io/name: valkey
+           app.kubernetes.io/component: master
+       spec:
+         accessModes:
+           - "ReadWriteOnce"
+         resources:
+           requests:
+             storage: "8Gi"
dev, valkey-node, PodDisruptionBudget (policy) has been added:
- 
+ # Source: valkey/templates/sentinel/pdb.yaml
+ apiVersion: policy/v1
+ kind: PodDisruptionBudget
+ metadata:
+   name: valkey-node
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/component: node
+ spec:
+   maxUnavailable: 1
+   selector:
+     matchLabels:
+       app.kubernetes.io/instance: valkey
+       app.kubernetes.io/name: valkey
+       app.kubernetes.io/component: node
dev, valkey-replica, ServiceAccount (v1) has been added:
- 
+ # Source: valkey/templates/replicas/serviceaccount.yaml
+ apiVersion: v1
+ kind: ServiceAccount
+ automountServiceAccountToken: false
+ metadata:
+   name: valkey-replica
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/part-of: valkey
dev, valkey-replicas, PodDisruptionBudget (policy) has been added:
- 
+ # Source: valkey/templates/replicas/pdb.yaml
+ apiVersion: policy/v1
+ kind: PodDisruptionBudget
+ metadata:
+   name: valkey-replicas
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/component: replica
+ spec:
+   maxUnavailable: 1
+   selector:
+     matchLabels:
+       app.kubernetes.io/instance: valkey
+       app.kubernetes.io/name: valkey
+       app.kubernetes.io/component: replica
dev, valkey-replicas, Service (v1) has been added:
- 
+ # Source: valkey/templates/replicas/service.yaml
+ apiVersion: v1
+ kind: Service
+ metadata:
+   name: valkey-replicas
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/component: replica
+     app.kubernetes.io/part-of: valkey
+ spec:
+   type: ClusterIP
+   internalTrafficPolicy: Cluster
+   sessionAffinity: None
+   ports:
+     - name: tcp-redis
+       port: 6379
+       targetPort: redis
+       nodePort: null
+   selector:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/component: replica
dev, valkey-replicas, StatefulSet (apps) has been added:
- 
+ # Source: valkey/templates/replicas/application.yaml
+ apiVersion: apps/v1
+ kind: StatefulSet
+ metadata:
+   name: valkey-replicas
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/component: replica
+     app.kubernetes.io/part-of: valkey
+ spec:
+   replicas: 3
+   selector:
+     matchLabels:
+       app.kubernetes.io/instance: valkey
+       app.kubernetes.io/name: valkey
+       app.kubernetes.io/component: replica
+   serviceName: valkey-headless
+   updateStrategy:
+     type: RollingUpdate
+   template:
+     metadata:
+       labels:
+         app.kubernetes.io/instance: valkey
+         app.kubernetes.io/managed-by: Helm
+         app.kubernetes.io/name: valkey
+         app.kubernetes.io/version: 8.0.1
+         helm.sh/chart: valkey-1.0.2
+         app.kubernetes.io/component: replica
+       annotations:
+         checksum/configmap: ce36bba0f0ecd2a1435db147939805e631a1479f690fbb9021e9a53fe7f2e0e4
+         checksum/health: e6094ccfe6ef68b9fe1224188ba4f7458e1dd911ec698b5e8cefedc6d07f502e
+         checksum/scripts: f67fdb8e9103ec01b5a72d9a27e1a9d34e6dd7966e13839535d6b4a477e2f532
+         checksum/secret: 902caa1ad13ba17992a2db25cccc83894e3849f9fbefdbd57b28a8bee0e72c66
+     spec:
+       
+       securityContext:
+         fsGroup: 1001
+         fsGroupChangePolicy: Always
+         supplementalGroups: []
+         sysctls: []
+       serviceAccountName: valkey-replica
+       automountServiceAccountToken: false
+       affinity:
+         podAffinity:
+           
+         podAntiAffinity:
+           preferredDuringSchedulingIgnoredDuringExecution:
+             - podAffinityTerm:
+                 labelSelector:
+                   matchLabels:
+                     app.kubernetes.io/instance: valkey
+                     app.kubernetes.io/name: valkey
+                     app.kubernetes.io/component: replica
+                 topologyKey: kubernetes.io/hostname
+               weight: 1
+         nodeAffinity:
+           
+       enableServiceLinks: true
+       terminationGracePeriodSeconds: 30
+       containers:
+         - name: valkey
+           image: docker.io/bitnami/valkey:8.0.1-debian-12-r0
+           imagePullPolicy: "IfNotPresent"
+           securityContext:
+             allowPrivilegeEscalation: false
+             capabilities:
+               drop:
+               - ALL
+             readOnlyRootFilesystem: true
+             runAsGroup: 1001
+             runAsNonRoot: true
+             runAsUser: 1001
+             seLinuxOptions: {}
+             seccompProfile:
+               type: RuntimeDefault
+           command:
+             - /bin/bash
+           args:
+             - -c
+             - /opt/bitnami/scripts/start-scripts/start-replica.sh
+           env:
+             - name: BITNAMI_DEBUG
+               value: "false"
+             - name: VALKEY_REPLICATION_MODE
+               value: replica
+             - name: VALKEY_MASTER_HOST
+               value: valkey-master-0.valkey-headless.dev.svc.cluster.local
+             - name: VALKEY_MASTER_PORT_NUMBER
+               value: "6379"
+             - name: ALLOW_EMPTY_PASSWORD
+               value: "no"
+             - name: VALKEY_PASSWORD
+               valueFrom:
+                 secretKeyRef:
+                   name: valkey
+                   key: valkey-password
+             - name: VALKEY_MASTER_PASSWORD
+               valueFrom:
+                 secretKeyRef:
+                   name: valkey
+                   key: valkey-password
+             - name: VALKEY_TLS_ENABLED
+               value: "no"
+             - name: VALKEY_PORT
+               value: "6379"
+           ports:
+             - name: redis
+               containerPort: 6379
+           startupProbe:
+             failureThreshold: 22
+             initialDelaySeconds: 10
+             periodSeconds: 10
+             successThreshold: 1
+             timeoutSeconds: 5
+             tcpSocket:
+               port: redis
+           livenessProbe:
+             initialDelaySeconds: 20
+             periodSeconds: 5
+             timeoutSeconds: 6
+             successThreshold: 1
+             failureThreshold: 5
+             exec:
+               command:
+                 - sh
+                 - -c
+                 - /health/ping_liveness_local_and_master.sh 5
+           readinessProbe:
+             initialDelaySeconds: 20
+             periodSeconds: 5
+             timeoutSeconds: 2
+             successThreshold: 1
+             failureThreshold: 5
+             exec:
+               command:
+                 - sh
+                 - -c
+                 - /health/ping_readiness_local_and_master.sh 1
+           resources:
+             limits:
+               cpu: 150m
+               ephemeral-storage: 2Gi
+               memory: 192Mi
+             requests:
+               cpu: 100m
+               ephemeral-storage: 50Mi
+               memory: 128Mi
+           volumeMounts:
+             - name: start-scripts
+               mountPath: /opt/bitnami/scripts/start-scripts
+             - name: health
+               mountPath: /health
+             - name: valkey-data
+               mountPath: /data
+             - name: config
+               mountPath: /opt/bitnami/valkey/mounted-etc
+             - name: empty-dir
+               mountPath: /opt/bitnami/valkey/etc
+               subPath: app-conf-dir
+             - name: empty-dir
+               mountPath: /tmp
+               subPath: tmp-dir
+       volumes:
+         - name: start-scripts
+           configMap:
+             name: valkey-scripts
+             defaultMode: 0755
+         - name: health
+           configMap:
+             name: valkey-health
+             defaultMode: 0755
+         - name: config
+           configMap:
+             name: valkey-configuration
+         - name: empty-dir
+           emptyDir: {}
+   volumeClaimTemplates:
+     - apiVersion: v1
+       kind: PersistentVolumeClaim
+       metadata:
+         name: valkey-data
+         labels:
+           app.kubernetes.io/instance: valkey
+           app.kubernetes.io/name: valkey
+           app.kubernetes.io/component: replica
+       spec:
+         accessModes:
+           - "ReadWriteOnce"
+         resources:
+           requests:
+             storage: "8Gi"
dev, valkey-scripts, ConfigMap (v1) has been added:
+ # Source: valkey/templates/scripts-configmap.yaml
+ apiVersion: v1
+ kind: ConfigMap
+ metadata:
+   name: valkey-scripts
+   namespace: "dev"
+   labels:
+     app.kubernetes.io/instance: valkey
+     app.kubernetes.io/managed-by: Helm
+     app.kubernetes.io/name: valkey
+     app.kubernetes.io/version: 8.0.1
+     helm.sh/chart: valkey-1.0.2
+     app.kubernetes.io/part-of: valkey
+ data:
+   start-master.sh: |
+     #!/bin/bash
+ 
+     [[ -f $VALKEY_PASSWORD_FILE ]] && export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
+     if [[ -f /opt/bitnami/valkey/mounted-etc/master.conf ]];then
+         cp /opt/bitnami/valkey/mounted-etc/master.conf /opt/bitnami/valkey/etc/master.conf
+     fi
+     if [[ -f /opt/bitnami/valkey/mounted-etc/valkey.conf ]];then
+         cp /opt/bitnami/valkey/mounted-etc/valkey.conf /opt/bitnami/valkey/etc/valkey.conf
+     fi
+     ARGS=("--port" "${VALKEY_PORT}")
+     ARGS+=("--requirepass" "${VALKEY_PASSWORD}")
+     ARGS+=("--masterauth" "${VALKEY_PASSWORD}")
+     ARGS+=("--include" "/opt/bitnami/valkey/etc/valkey.conf")
+     ARGS+=("--include" "/opt/bitnami/valkey/etc/master.conf")
+     exec valkey-server "${ARGS[@]}"
+   start-replica.sh: |
+     #!/bin/bash
+ 
+     get_port() {
+         hostname="$1"
+         type="$2"
+ 
+         port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
+         port=${!port_var}
+ 
+         if [ -z "$port" ]; then
+             case $type in
+                 "SENTINEL")
+                     echo 26379
+                     ;;
+                 "VALKEY")
+                     echo 6379
+                     ;;
+             esac
+         else
+             echo $port
+         fi
+     }
+ 
+     get_full_hostname() {
+         hostname="$1"
+         full_hostname="${hostname}.${HEADLESS_SERVICE}"
+         echo "${full_hostname}"
+     }
+ 
+     VALKEYPORT=$(get_port "$HOSTNAME" "VALKEY")
+     HEADLESS_SERVICE="valkey-headless.dev.svc.cluster.local"
+ 
+     [[ -f $VALKEY_PASSWORD_FILE ]] && export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
+     [[ -f $VALKEY_MASTER_PASSWORD_FILE ]] && export VALKEY_MASTER_PASSWORD="$(< "${VALKEY_MASTER_PASSWORD_FILE}")"
+     if [[ -f /opt/bitnami/valkey/mounted-etc/replica.conf ]];then
+         cp /opt/bitnami/valkey/mounted-etc/replica.conf /opt/bitnami/valkey/etc/replica.conf
+     fi
+     if [[ -f /opt/bitnami/valkey/mounted-etc/valkey.conf ]];then
+         cp /opt/bitnami/valkey/mounted-etc/valkey.conf /opt/bitnami/valkey/etc/valkey.conf
+     fi

+     echo "" >> /opt/bitnami/valkey/etc/replica.conf
+     echo "replica-announce-port $VALKEYPORT" >> /opt/bitnami/valkey/etc/replica.conf
+     echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/valkey/etc/replica.conf
+     ARGS=("--port" "${VALKEY_PORT}")
+     ARGS+=("--replicaof" "${VALKEY_MASTER_HOST}" "${VALKEY_MASTER_PORT_NUMBER}")
+     ARGS+=("--requirepass" "${VALKEY_PASSWORD}")
+     ARGS+=("--masterauth" "${VALKEY_MASTER_PASSWORD}")
+     ARGS+=("--include" "/opt/bitnami/valkey/etc/valkey.conf")
+     ARGS+=("--include" "/opt/bitnami/valkey/etc/replica.conf")
+     exec valkey-server "${ARGS[@]}"

